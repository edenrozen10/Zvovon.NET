שלב 3 – אפליקציה:

שאלה מספר 3: 
ניסיתי לרשום את הקוד אבל הוא לא רץ לי כמו שצריך ( צירפתי גם הקבצים לrepo, אני יודעת שאינם תקינים).
הממשק שלנו יתבסס על HTML,CSS,JS.
HTML הוא הקובץ הראשי והבסיסי שלנו. באמצעות "קישורים" חיברתי את הקובץ של הJS שאמור להפוך את העמוד מסטטי לדינאמי.
בנוסף קישרתי גם קובץ של css שאחראי על עיצוב הממשק.
המערכת עובדת בצורה כזו שמתקבל קלט מהמשתמש, הסיומת של הURL משתנה כך שמגיעים לURL של JS, מתבצעות הפונקציות, וחוזרים לURL של HTML.
המשתמש נכנס למערכת, 

שאלה מספר 4:
כיוון שהאפליקציה אמורה לשמש חיילים קרביים, שלאו דווקא מבינים את הפיזיקה שמאחורי שיגור הטיל, או מכירים את היחידות המוסכמות, עלינו לפשט ולהדגיש למשתמש את כל בקשותינו.
1. נדאג לפרט מה עושה המחשבון ומה על המשתמש לעשות, במקרה שלנו נבקש מהמשתמש להכניס את הערכים, נפרט באילו יחידות וכאיזה גודל (סקלרי או וקטורי).  
עם זאת, נזכור שלרוב השימוש במחשבון יעשה בזמן אמת, בו על החייל לפעול מהר. לכן עלינו לזכור לכתוב באופן תמציתי וברור את ההגדרות, כדי שהחייל יוכל להבין בזמן מינימלי מה עליו לעשות כדי לתפעל את המחשבון.

2. נייצר מוצר מובן מבחינה ויזואלית. תהיה כותרת שמרמזת למטרת המחשבון. אחריה הסבר על המחשבון. ורק אח"כ תיבות הקלט.  ליד כל תיבה שצריך להכניס בה ערך כלשהו נכתוב את הערך שמצופה מהמשתמש להכניס ונזכיר שוב באילו יחידות, על מנת למנוע 
טעויות שיגזלו עוד זמן מהחייל או חלילה ימנעו מהזבובון לבצע את המשימה.


3. (אני לא יודעת לעשות את זה בנקודת הזמן הזו אבל אנשים מוכשרים כנראה כן יודעים) אפשר להוסיף פיצ'ר שיראה את מסלול הטיל ויסמן את נקודת פגיעתו על גבי מפה, כך תהיה לחייל עוד הזדמנות לוודא שהזבובון יעשה את המבוקש.



שאלה מספר 5:

נפתח את ממשק המשתמש בעזרת שלושה כלים עיקריים:
HTML- השלד של הדף שלנו
CSS- עיצוב הדף
JS- הרחבה לHTML על מנת שלדף יהיו פונקציות רבות יותר. 
react ספרייה המשמשת לפיתוח ממשק משתמש
העיקרון של SPA הוא שתוכן הדף משתנה לפי הסיומת של הURL, אין באמת "קפיצה" לקבצים אחרים והכל מתנהל באותו דף HTML.
הדבר מתאפשר בזכות יצירה של מודול, שמתפקד כראוטר ומחליף את תוכן הדף בהתאם לשינוי בURL.
כיוון שאנחנו ממשיכים עם ארכיטקטורת microservices ניצור לכל חישוב,פונקציה "עמוד" משלה, כדי להקטין את התלות בין מרכיבי התוכנה.


